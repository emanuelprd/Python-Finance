#!/usr/bin/env python
# coding: utf-8

# Libraries usadas nessa simulação:

# In[1]:


import pandas as pd
import numpy as np
from pandas_datareader import data as wp
import matplotlib.pyplot as plt
from scipy.stats import norm


# Extrai os meus dados do Yahoo Finance por do pandas DataReader. 

# In[2]:


tickers = ['^BVSP']

my_data = pd.DataFrame()

for t in tickers:
    my_data[t] = wp.DataReader(t, data_source = 'yahoo',start='2019-11-01')['Adj Close']


# In[3]:


print(my_data)
my_data.plot(figsize=(20,10))


# Retorno linear diário

# In[4]:


ibov_return = my_data/my_data.shift(1)-1
ibov_return


# Retorno logarítmico. 

# In[5]:


log_return = np.log(1+my_data.pct_change())
log_return


# Eu decidi por utilizar o retorno linear por estar mais familiarizado.*

# * Alguns indicam o Log-Retorno

# In[59]:


m = ibov_return.mean()
var = ibov_return.var()
std = np.sqrt(var)


# A fórmula utilizada para esta simulação de Monte Carlo foi o Movimento Browniano Geométrico. 
 
# GBM = np.exp(drift + std(x)*norm.ppf(np.random.rand(intervals,iterations)))

# drift = mean(x) - (1/2)*(x)

# In[7]:


drift = m - (0.5*var)
drift

# Abaixo estou definindo alguns parametros, como o meu eixo x(intervalos) e número de simulações(iterações)

# In[8]:


intervals = 30
iterations = 1000


# Aplicação da fórmula:

# In[9]:


d_return = np.exp(drift.values + std.values*norm.ppf(np.random.rand(intervals,iterations)))
d_return


# In[10]:


d0 = my_data.iloc[-1]
d0


# Aqui foi utilizado um loop pra cada n do meu preço futuro(fprice), onde meu n é o número de intervalos. 
# Para cada intervalo, um número aleatório é gerado pela fórmula GBM.

# In[11]:


fprice = np.zeros_like(d_return)
fprice[0] = d0

for n in range(1,intervals):
    fprice[n] = fprice[n-1]*d_return[n]

fprice


# In[12]:


plt.figure(figsize=(20,10))
plt.plot(fprice)


# In[13]:


plt.hist(fprice[-1], bins = 40, histtype = 'step')
plt.show()


# In[14]:

print("Os resultados dessa simulação foram: \n")
print("Ativo: ", tickers,"\n")
print("Intervalos:",intervals, "\nIterações:", iterations, "\n")
print("Média :",int(fprice.mean()))
print("Máximo :",int(fprice.max()))
print("Mínimo :",int(fprice.min()))
print("Desvio-Padrão :",int(fprice.std()))





